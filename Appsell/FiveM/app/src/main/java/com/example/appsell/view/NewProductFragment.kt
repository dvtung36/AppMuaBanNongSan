package com.example.appsell.viewimport android.annotation.SuppressLintimport android.content.ContentResolverimport android.net.Uriimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.webkit.MimeTypeMapimport android.widget.PopupMenuimport androidx.activity.OnBackPressedCallbackimport androidx.activity.result.ActivityResultLauncherimport androidx.activity.result.contract.ActivityResultContracts.GetContentimport androidx.annotation.MenuResimport androidx.core.view.isVisibleimport androidx.fragment.app.Fragmentimport androidx.navigation.fragment.findNavControllerimport androidx.recyclerview.widget.DefaultItemAnimatorimport androidx.recyclerview.widget.LinearLayoutManagerimport com.bumptech.glide.Glideimport com.bumptech.glide.request.RequestOptionsimport com.example.appsell.Rimport com.example.appsell.adapter.ImageProductAdapterimport com.example.appsell.base.Constantimport com.example.appsell.base.Untilimport com.example.appsell.model.Productimport com.google.firebase.database.DatabaseReferenceimport com.google.firebase.database.FirebaseDatabaseimport com.google.firebase.storage.FirebaseStorageimport com.google.firebase.storage.StorageReferenceimport com.google.firebase.storage.UploadTaskimport com.google.gson.Gsonimport kotlinx.android.synthetic.main.fragment_new_product.*class NewProductFragment : Fragment() {    var storage: FirebaseStorage? = null    var storageReference: StorageReference? = null    private var product: Product? = null    private var type: String = Constant.PRODUCT_VEGETABLE    private var startForResult: ActivityResultLauncher<String>? = null    lateinit var uri: Uri    private var path: String = ""    private var paths = ArrayList<String>()    private var uris = ArrayList<Uri>()    private var adapter: ImageProductAdapter? = null    @SuppressLint("SetTextI18n")    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        val callBack: OnBackPressedCallback = object : OnBackPressedCallback(true) {            override fun handleOnBackPressed() {                parentFragment?.findNavController()?.popBackStack()            }        }        requireActivity().onBackPressedDispatcher.addCallback(callBack)        startForResult = registerForActivityResult(GetContent()) { uri ->            uri?.let {                uris.add(uri)                adapter = ImageProductAdapter(uris)                val manager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)                rcImage.layoutManager = manager                rcImage.itemAnimator = DefaultItemAnimator()                rcImage.adapter = adapter                this.uri = it                uploadImage()            }        }        storage = FirebaseStorage.getInstance()        storageReference = storage!!.reference    }    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        return inflater.inflate(R.layout.fragment_new_product, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        val json = arguments?.getString(ListProductFragment.DATA)        btn_updateImage.visibility = View.VISIBLE        view_action.visibility = View.VISIBLE        json?.apply {            val gson = Gson()            product = gson.fromJson(json, Product::class.java)            product?.let {                edt_name_product.setText(it.productName)                edt_cost_product.setText("" + it.cost)                edt_description_product.setText(it.description)                txt_delete.isVisible = true                txt_create.text = "Update"                txt_header.text = "Edit product"                Glide.with(requireContext())                    .load(it.urlImage)                    .into(img_upload)            }            if (product != null) {                if (product!!.urlImage!!.isEmpty()) {                    txt_image_description.visibility = View.VISIBLE                } else {                    txt_image_description.visibility = View.GONE                }            } else {                txt_image_description.visibility = View.VISIBLE            }        }        if (product != null) {            type = product!!.type            val text = when (product!!.type) {                Constant.PRODUCT_VEGETABLE -> requireContext().getString(R.string.type_product) + " " + requireContext().getString(                    R.string.vegetable                )                Constant.PRODUCT_PACKAGED -> requireContext().getString(R.string.type_product) + " " + requireContext().getString(                    R.string.packaged_food                )                Constant.PRODUCT_MEAT -> requireContext().getString(R.string.type_product) + " " + requireContext().getString(                    R.string.fresh_meat                )                Constant.PRODUCT_DIFFERENT -> requireContext().getString(R.string.type_product) + " " + requireContext().getString(                    R.string.different                )                Constant.PRODUCT_HA -> requireContext().getString(R.string.type_product) + " " + requireContext().getString(                    R.string.ha                )                Constant.PRODUCT_DOKHO -> "Commodities:" + " " + "Rice, flour, dry goods"                Constant.PRODUCT_DONGLANH -> "Commodities:" + " " + "Frozen food"                Constant.PRODUCT_TRAICAY -> "Commodities:" + " " + "Fruit"                Constant.PRODUCT_NUOCNGOT -> "Commodities:" + " " + "Soft drinks"                else -> {                    type = Constant.PRODUCT_VEGETABLE                    requireContext().getString(R.string.type_product) + " " + requireContext().getString(                        R.string.vegetable                    )                }            }            type_product.text = text        } else {            type_product.text =                requireContext().getString(R.string.type_product) + " " + requireContext().getString(                    R.string.vegetable                )        }        btn_back.setOnClickListener {            findNavController().popBackStack()        }        txt_create.setOnClickListener {            createProduct()        }        txt_delete.setOnClickListener {            if (product != null) {                FirebaseDatabase.getInstance().reference.child("products").child(type)                    .child(product!!.key)                    .removeValue()                    .addOnSuccessListener {                        findNavController().popBackStack()                        Until.message("Delete success", requireActivity())                    }                    .addOnFailureListener {                        Until.message(                            it.message ?: "System error please try again",                            requireActivity()                        )                    }            }        }        type_product.setOnClickListener { v: View ->            showMenu(v, R.menu.menu)        }        btn_updateImage.setOnClickListener {            chooseImage()        }    }    private fun createProduct() {        val nameProduct = edt_name_product.text.toString().trim()        val cost = edt_cost_product.text.toString().trim()        val description = edt_description_product.text.toString().trim()        if (nameProduct.isEmpty() || cost.isEmpty() || description.isEmpty()) {            Until.message("Please enter all the information.", requireActivity())        } else {            Until.showLoading(requireActivity())            val database: FirebaseDatabase = FirebaseDatabase.getInstance()            val reference: DatabaseReference = database.reference            if (product != null) {                // sửa sản phẩm                val productUpdate =                    Product(                        nameProduct,                        cost.toLong(),                        description,                        product!!.key,                        type,                        product!!.urlImage,                        null                    )                reference.child("products").child(type).child(productUpdate.key)                    .setValue(productUpdate)                    .addOnSuccessListener {                        findNavController().popBackStack()                        Until.message("Successful product updates", requireActivity())                        Until.hideLoading()                    }                    .addOnFailureListener {                        Until.message(                            it.message ?: "System error please try again",                            requireActivity()                        )                        Until.hideLoading()                    }            } else {                // Tạo mới sản phẩm                val key = database.reference.push().key!!                path = paths.joinToString()                val productCreate =                    Product(nameProduct, cost.toLong(), description, key, type, path, null)                reference.child("products").child(type).child(key).setValue(productCreate)                    .addOnSuccessListener {                        Until.hideLoading()                        findNavController().popBackStack()                        Until.message("Add new successful products\n", requireActivity())                    }                    .addOnFailureListener {                        Until.hideLoading()                        Until.message(                            it.message ?: "System error please try again",                            requireActivity()                        )                    }            }        }    }    @SuppressLint("SetTextI18n")    private fun showMenu(v: View, @MenuRes menuRes: Int) {        val popup = PopupMenu(requireContext(), v)        popup.menuInflater.inflate(menuRes, popup.menu)        popup.setOnMenuItemClickListener {            val text = when (it!!.itemId) {                R.id.header1 -> {                    type = Constant.PRODUCT_VEGETABLE                    requireContext().getString(R.string.type_product) + " " + requireContext().getString(                        R.string.vegetable                    )                }                R.id.header2 -> {                    type = Constant.PRODUCT_PACKAGED                    requireContext().getString(R.string.type_product) + " " + requireContext().getString(                        R.string.packaged_food                    )                }                R.id.header3 -> {                    type = Constant.PRODUCT_MEAT                    requireContext().getString(R.string.type_product) + " " + requireContext().getString(                        R.string.fresh_meat                    )                }                R.id.header4 -> {                    type = Constant.PRODUCT_DIFFERENT                    "Loại hàng hóa:" + " " + "Dầu ăn , gia vị"                }                R.id.header5 -> {                    type = Constant.PRODUCT_HA                    "Loại hàng hóa:" + " " + "Sữa uống các loại"                }                R.id.header6 -> {                    type = Constant.PRODUCT_DOKHO                    "Loại hàng hóa:" + " " + "Gạo bột , đồ khô "                }                R.id.header7 -> {                    type = Constant.PRODUCT_DONGLANH                    "Loại hàng hóa:" + " " + " Thực phẩm đông lạnh "                }                R.id.header8 -> {                    type = Constant.PRODUCT_TRAICAY                    "Loại hàng hóa:" + " " + " Fruit "                }                R.id.header9 -> {                    type = Constant.PRODUCT_NUOCNGOT                    "Loại hàng hóa:" + " " + " Soft drinks "                }                else -> ""            }            type_product.text = text            true        }        popup.show()    }    private fun uploadImage() {        Until.showLoading(requireActivity())        var uploadTask: UploadTask        val storageReference: StorageReference = FirebaseStorage.getInstance().getReference("profile_manager")        for (i in 0 until uris.size) {            val local: StorageReference = storageReference.child("" + System.currentTimeMillis() + "." + getFile(uris[i]))            uploadTask = local.putFile(uris[i])            uploadTask.continueWithTask { p0 ->                if (!p0.isSuccessful) {                    Until.message(                        p0.exception?.message ?: "System error please try again",                        requireActivity()                    )                }                Until.hideLoading()                local.downloadUrl            }.addOnCompleteListener { value ->                if (value.isSuccessful) {                    try {                        path = value.result.toString()                        paths.add(path)                        Glide.with(requireActivity())                            .load(value.result)                            .apply(RequestOptions())                            .fitCenter()                            .into(img_upload)                        product?.let {//                            product!!.urlImage = value.result.toString()                        }                        txt_image_description.visibility = View.GONE                    } catch (e: Exception) {                        Until.message(e.message ?: "System error please try again", requireActivity())                    }                    Until.hideLoading()                }            }        }    }    private fun getFile(uri: Uri): String {        val contentResolver: ContentResolver = requireActivity().contentResolver        val mimeTypeMap: MimeTypeMap = MimeTypeMap.getSingleton()        return mimeTypeMap.getExtensionFromMimeType(contentResolver.getType(uri))!!    }    private fun chooseImage() {        startForResult?.launch("image/*")    }}